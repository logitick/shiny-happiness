//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
namespace RPS.Models
{
	public class Tournament : Model
	{
		private int id;
		private int hostId;
		private string tournamentName;
		private int numberOfPlayersId;
		private int treeLevel;
		private DateTime created = DateTime.Now;

		private User[] userArray;
		private Dictionary<int, User> usersCollection;
		private Dictionary<int, TournamentHistory> historyCollection;

		public int Id {
			get {
				return this.id;
			}
			set {
				id = value;
			}
		}

		public int HostId {
			get {
				return this.hostId;
			}
			set {
				hostId = value;
			}
		}

		public string TournamentName {
			get {
				return this.tournamentName;
			}
			set {
				tournamentName = value;
			}
		}

		public int NumberOfPlayersId {
			get {
				return this.numberOfPlayersId;
			}
			set {
				numberOfPlayersId = value;
			}
		}

		public int TreeLevel {
			get {
				return this.treeLevel;
			}
			set {
				treeLevel = value;
			}
		}

		public DateTime Created {
			get {
				return this.created;
			}
			set {
				created = value;
			}
		}

		public User Host {
			get {
				return User.GetById(this.HostId);
			}
		}


		public static Tournament GetById (int id) {
			return Tournament.GetById (id, 0);
		}

		public static readonly int INCLUDE_PLAYERS = 0x01;
		public static readonly int INCLUDE_HISTORY = 0x02;
		public static readonly int INCLUDE_ALL = INCLUDE_PLAYERS + INCLUDE_HISTORY;


		public static Tournament GetById (int id, int flags) {
			Tournament tournament = new Tournament ();
			tournament.Id = id;
			tournament.AddApiPathFragment(id);

			if ((flags & Tournament.INCLUDE_ALL) == Tournament.INCLUDE_ALL) {
				tournament.AddApiPathFragment("details");
			} else {

				if ((flags & Tournament.INCLUDE_HISTORY) == Tournament.INCLUDE_HISTORY) {
					tournament.AddApiPathFragment("history");
				}
				
				if((flags & Tournament.INCLUDE_PLAYERS) == Tournament.INCLUDE_PLAYERS) {
					UnityEngine.Debug.Log("players");
				}
			}



			tournament.FetchHTTPData ();
			return tournament;
		}

		public override bool Update ()
		{
			if (this.HostId > 0 &&
				this.TournamentName.Length > 0 &&
				this.NumberOfPlayersId > 0) {

				SimpleJSON.JSONNode tournamentJSON = SimpleJSON.JSON.Build();
				tournamentJSON["host_id"].AsInt = this.HostId;
				tournamentJSON["tournament_name"] = this.TournamentName;
				tournamentJSON["no_of_players_id"].AsInt = this.NumberOfPlayersId;
				tournamentJSON["tree_level"].AsInt = this.TreeLevel;

				this.AddApiPathFragment(this.Id);
				this.PostHTTPData(Tournament.HTTP_FORM_KEY_UPDATE, tournamentJSON);
				return true;
			}
			return false;
		}

		public override bool Insert ()
		{
			if (this.HostId > 0 &&
				this.TournamentName.Length > 0 &&
				this.NumberOfPlayersId > 0) 
			{
				SimpleJSON.JSONNode tournamentJSON = SimpleJSON.JSON.Build();
				tournamentJSON["host_id"].AsInt = this.HostId;
				tournamentJSON["tournament_name"] = this.TournamentName;
				tournamentJSON["no_of_players_id"].AsInt = this.NumberOfPlayersId;
				tournamentJSON["tree_level"].AsInt = this.TreeLevel;
				tournamentJSON["created"] = this.Created.ToString(new System.Globalization.DateTimeFormatInfo().RFC1123Pattern);

				this.PostHTTPData(Tournament.HTTP_FORM_KEY_INSERT, tournamentJSON);
				return true;
			}
			return false;
		}

		public override void ConvertToModel ()
		{
			this.HostId = (int)this.GetValue ("host_id", TypeCode.Int32);
			this.TournamentName = this.GetValue ("tournament_name");
			this.NumberOfPlayersId = (int)this.GetValue ("no_of_players", TypeCode.Int32);
			this.TreeLevel = (int)this.GetValue ("tree_level", TypeCode.Int32);
			this.Created = (DateTime)this.GetValue ("created", TypeCode.DateTime);

			if (this.jsonData ["history"] != null) {
				this.ParseHistory(this.jsonData["history"].AsArray);
			} else {
				UnityEngine.Debug.Log ("History null");
			}

			if (this.jsonData ["players"] != null) {
				UnityEngine.Debug.Log(this.jsonData["players"].AsArray.Count);
			} else {
				UnityEngine.Debug.Log ("players null");
			}

		}

		private void ParseHistory(SimpleJSON.JSONArray historyJSON) {
			this.historyCollection = new Dictionary<int, TournamentHistory> ();
			for (int i = 0; i < historyJSON.Count; i++) {
				TournamentHistory th = new TournamentHistory();
				th.Id = historyJSON[i]["id"].AsInt;
				th.UserId1 = historyJSON[i]["user_id1"].AsInt;
				th.UserId2 = historyJSON[i]["user_id2"].AsInt;
				th.TournamentId = this.Id;
				th.TreeLevel = historyJSON[i]["tree_level"].AsInt;
				th.Created = DateTime.Parse(historyJSON[i]["created"].Value.ToString());
				this.historyCollection.Add (th.Id, th);
			}
		}

		private void ParsePlayers(SimpleJSON.JSONArray playerJSON) {
			this.usersCollection = new Dictionary<int, User>();
			for (int i = 0; i < playerJSON.Count; i++) {
				User user = new User();
				user.Id = playerJSON[i]["id"].AsInt;
				user.Username = playerJSON[i]["username"];
				user.Firstname = playerJSON[i]["firstname"];
				user.Lastname = playerJSON[i]["lastname"];
				user.EmailAddress = playerJSON[i]["email_address"];
				user.NumberOfWins = playerJSON[i]["no_of_wins"].AsInt;
				user.Created = DateTime.Parse(playerJSON[i]["created"].Value.ToString());
				user.Activated = playerJSON[i]["activated"].AsBool;
				user.Status = playerJSON[i]["status"].AsInt;

				this.usersCollection.Add(user.Id, user);
			}
		}

		public override string getApiPath() {
			string path = "tournaments";
			if (this.apiPathFragments != null) {
				foreach (string fragment in this.apiPathFragments) {
					path += "/"+fragment;
				}
			}
			return path;
		}


		public User[] Players {
			get{
				if (this.usersCollection == null) {
					return new User[0];
				}
				User[] user = new User[this.usersCollection.Count];
				int i = 0;
				foreach (KeyValuePair<int, User> kvp in this.usersCollection) {
					user[i++] = kvp.Value;
				}
				return user;
			}
		}

		public TournamentHistory[] History {
			get{ 
				if (this.historyCollection == null) {
					return new TournamentHistory[0];
				}
				TournamentHistory[] history = new TournamentHistory[this.historyCollection.Count];
				int i = 0;
				foreach (KeyValuePair<int, TournamentHistory> kvp in this.historyCollection) {
					history[i++] = kvp.Value;
				}
				return history; 
			}
		}
		public override string ToString ()
		{
			return string.Format ("[Tournament: Id={0}, HostId={1}, TournamentName={2}, NumberOfPlayersId={3}, TreeLevel={4}, Created={5}, Host={6}, Players={7}, History={8}]", Id, HostId, TournamentName, NumberOfPlayersId, TreeLevel, Created, Host, Players, History);
		}
		
	}
}

